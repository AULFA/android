<?xml version="1.0" encoding="UTF-8"?>
<s:section
  xmlns:s="http://schemas.io7m.com/structural/2.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:id="org.nypl.simplified.documentation.implementation.books">
  <s:section-title>Books</s:section-title>
  <s:subsection
    xml:id="org.nypl.simplified.documentation.implementation.books.overview">
    <s:subsection-title>Overview</s:subsection-title>
    <s:paragraph>
      The
      <s:link-external
        s:target="apidocs/org/nypl/simplified/books/core/package-summary.html">simplified-books-core</s:link-external>
      package implements all of the code to manage books.
    </s:paragraph>
    <s:paragraph>
      The package provides access to an on-disk
      <s:link-external s:target="apidocs/org/nypl/simplified/books/core/BookDatabaseType.html">book database</s:link-external>,
      and an in-memory
      <s:link-external s:target="apidocs/org/nypl/simplified/books/core/BooksStatusCacheType.html">status cache</s:link-external>.
      The book database provides the canonical view of the current state of
      a given book, and the status cache allows user interface code to quickly
      access the latest published state of a book without having to perform
      any blocking I/O.
    </s:paragraph>
    <s:paragraph>
      The package provides the main
      <s:link-external s:target="apidocs/org/nypl/simplified/books/core/FeedType.html">feed</s:link-external>
      abstraction. The application mostly deals with
      <s:term s:type="type">FeedType</s:term> values directly, and so is
      mostly insulated from the details of
      <s:link s:target="org.nypl.simplified.documentation.implementation.opds">OPDS</s:link>
      feeds. This also allows the application to construct feeds of books
      programmatically without having to go to the trouble of generating
      full OPDS feeds.
    </s:paragraph>
    <s:paragraph>
      The <s:link-external s:target="apidocs/org/nypl/simplified/books/core/BooksControllerType.html">book controller</s:link-external>
      interface exposes a set of asynchronous operations such as borrowing
      books, deleting books, returning or cancelling loans and holds,
      synchronizing accounts, etc. It is also capable of generating
      feeds of the books in the current book database to allow the application
      to show the user the current list of loans or holds.
    </s:paragraph>
  </s:subsection>
</s:section>
